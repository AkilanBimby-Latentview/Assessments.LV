# -*- coding: utf-8 -*-
"""LogisticRegressionIA2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1LWxFynRz255yjH4RbPNCbh07LxvdTL8j
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.preprocessing import MinMaxScaler,StandardScaler
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.preprocessing import LabelEncoder
import sklearn.metrics as metrics
from sklearn.metrics import r2_score,mean_squared_error

df1=pd.read_csv("/content/sample_data/booking.csv")
df1.head()

df1.shape

df1.info()

df1.describe()

"""2.5 task
1
"""

#2.5 task
#1

df1.isnull().sum()

df1.dropna()

"""1.b"""

#identifying outlier
sns.boxplot(df1["average price"])
plt.show()
sns.boxplot(df1["lead time"])
plt.show()

# Calculate Q1, Q3, and IQR
q1 = df1['average price'].quantile(0.25)
q3 = df1['average price'].quantile(0.75)
iqr = q3 - q1

# Calculate outlier bounds
lower_bound = q1 - 1.5 * iqr
upper_bound = q3 + 1.5 * iqr

# Filter dataframe to remove outliers
clean_df = df1[(df1['average price'].index >= lower_bound) & (df1['average price'].index <= upper_bound)]

print("DataFrame after removing outliers:")
print(clean_df)

"""2"""

#2

# Initialize LabelEncoder
label_encoder = LabelEncoder()
categories = df1.select_dtypes(include=['object']).columns

encoded_df=df1

# Fit and transform the target column
for column in categories:
    encoded_df[column] = label_encoder.fit_transform(encoded_df[column])
encoded_df

"""3"""

df1.duplicated().sum()
df1=df1.drop_duplicates()

df1.columns



df1.drop(columns=["Booking_ID","date of reservation"],inplace=True)

df1["type of meal"].value_counts()

df1["room type"].value_counts()

df1["market segment type"].value_counts()

df1["booking status"].value_counts()

"""4"""

#splitting features and labels
X=df1.drop(columns='booking status') #feature
y=df1["booking status"] #label

"""5"""

#splitting train and test dataset
from sklearn.preprocessing import StandardScaler
X_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.2,random_state=42)
st_x= StandardScaler()
X_train= st_x.fit_transform(X_train)
X_test= st_x.transform(X_test)
model=LogisticRegression()
model.fit(X_train,y_train)
prediction=model.predict(X_test)

# Predictions
prediction = model.predict(X_test)
prediction

"""6"""

# Predictions
y_pred = model.predict(X_test)
y_pred

# Evaluate the model
acc = metrics.accuracy_score(y_test, y_pred)
print("Accuracy:", acc)

pre = metrics.precision_score(y_test, y_pred)
print("Precision:", pre)

# Coefficients and intercept
rec = metrics.recall_score(y_test, y_pred)
print("Recall:", rec)

f1 = metrics.f1_score(y_test, y_pred)
print("F1 Score:", f1)

