# -*- coding: utf-8 -*-
"""KNNclassifierAI2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1k_6zzdZTd7fLivVqwShOdNFEQzSGvafa
"""

import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.ensemble import RandomForestClassifier
from sklearn.preprocessing import LabelEncoder
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score,classification_report
from sklearn.neighbors import KNeighborsClassifier
from sklearn.preprocessing import MinMaxScaler,StandardScaler

df=pd.read_csv("/content/sample_data/winequality-red.csv")
df.head()

df.info()

df.shape

#a.i

df.isna().sum()

df=df.dropna()
#dropped missing values

#a.ii

#identifying and managing outliers

def remove_out(df1):
	num_col=df1.columns[df1.dtypes!="object"]
	for i in num_col:
		q1=df1[i].quantile(0.25)
		q3=df1[i].quantile(0.75)
		iqr=q3-q1
		med=df1[i].median()
		df1[i]=np.where((df1[i]<q1-1.5*iqr) | (df1[i]>q3+1.5*iqr),med,df1[i])
	return(df1)

df1=remove_out(df)
#removed outliers with the function created above

#b.i

r1={3:0,4:0,5:0,6:0,7:1,8:1}
df["quality"]=df["quality"].map(r1)
#assigned values to quality

#c
# This dataset has no categorical column
cat_col=df.columns[df.dtypes=="object"]
for j in cat_col:
	df[j]=LabelEncoder().fit_transform(df[j])
#encoded the categorical column

#d.i
print(df.duplicated().sum())
df=df.drop_duplicates()

#d.ii    by heat map we understand every feature is equally correlated to target and its not necessary to drop any feature
sns.heatmap(df.corr())

X=df.drop(columns=["quality"])
y=df["quality"]

#e.i
x_train,x_test,y_train,y_test = train_test_split(X,y,test_size=0.3,random_state=42)

# Feature scaling
scaler = StandardScaler()
x_train_scaled = scaler.fit_transform(x_train)
x_test_scaled = scaler.transform(x_test)

#we split the data
#f
clf=KNeighborsClassifier(n_neighbors=3)
clf.fit(x_train,y_train)
y_pred=clf.predict(x_test)

#2.5.g we trained the model, lets evaluate it
print("accuracy score is ",accuracy_score(y_test,y_pred),"\n",classification_report(y_test,y_pred))

#an wine qualityprediction model is created with good precision