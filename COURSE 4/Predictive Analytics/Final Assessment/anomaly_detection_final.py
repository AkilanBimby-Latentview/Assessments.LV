# -*- coding: utf-8 -*-
"""Anomaly detection Final.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ZrWHEB44948UxABIZFoWY554AzT4etLc
"""

#anomaly detection
# Importing necessary libraries
import pandas as pd
from sklearn.ensemble import IsolationForest
import warnings
warnings.filterwarnings('ignore')
import matplotlib.pyplot as plt
import seaborn as sns

#loading dataset
df = pd.read_csv("/content/sample_data/anomaly_train.csv")
df.head()

df.info()

df.describe()

#handling null values
df.isnull().sum()

#handling duplicate values
df.duplicated().sum()

df["Type"].value_counts()

df["Location"].value_counts()

#creating label encoder
from sklearn.preprocessing import LabelEncoder
le=LabelEncoder()
df["Type"]=le.fit_transform(df["Type"])
df["Location"]=le.fit_transform(df["Location"])
df.head()

#finding outliers
sns.boxplot(df)

#correlation matrix
sns.heatmap(df.corr(),cmap="viridis",annot=True)

df.head()

# Select the features to be used for anomaly detection
features = ["Type", "Amount", "Location"]

# Create a new dataframe with the selected features
X = df[features]

model = IsolationForest()
model.fit(X)
y_pred = model.predict(X)

df["anomaly_score"] = model.decision_function(X)

anomalies = df.loc[df["anomaly_score"] < 0]

#scatter plot of suspicious activity vs Type of transaction
plt.scatter(df["Type"], df["anomaly_score"], label="Not Anomaly")
plt.scatter(anomalies["Type"], anomalies["anomaly_score"], color="r", label="Anomaly")
plt.xlabel("Type")
plt.ylabel("anomaly_score")
plt.legend()
plt.show()

#scatter plot of suspicious activity vs Transactions
plt.scatter(df["Amount"], df["anomaly_score"], label="Not Anomaly")
plt.scatter(anomalies["Amount"], anomalies["anomaly_score"], color="r", label="Anomaly")
plt.xlabel("Amount")
plt.ylabel("anomaly_score")
plt.legend()
plt.show()

#scatter plot of suspicious activity vs Location where the transaction occurs
plt.scatter(df["Location"], df["anomaly_score"], label="Not Anomaly")
plt.scatter(anomalies["Location"], anomalies["anomaly_score"], color="r", label="Anomaly")
plt.xlabel("Location")
plt.ylabel("anomaly_score")
plt.legend()
plt.show()

