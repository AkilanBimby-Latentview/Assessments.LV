# -*- coding: utf-8 -*-
"""Regression Final.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1_dJZUhDcfKkjfyBf6j5wuOPk6fbvA7v8
"""

#linear_regression
#importing the libraries
import pandas as pd
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
import seaborn as sns
import matplotlib.pyplot as plt

#importing data as a dataframe
data=pd.read_csv("/content/sample_data/Fare prediction.csv")
data.head(5)

data.shape

data.info()

data.describe()

#null values
data.isnull().sum()

#handling duplicates
data.duplicated().sum()

data["key"].value_counts()

data["key"]=data['key'].astype(str)

data.drop(columns="key",inplace=True)
data.drop(columns="pickup_datetime",inplace=True)

import seaborn as sns
import matplotlib.pyplot as plt
plt.figure(figsize=(15,6))
sns.boxplot(data)
plt.show()

num_col=data.columns[data.dtypes!="object"]
cat_col=data.columns[data.dtypes=="object"]

def remove_out(df1):
	num_col=df1.columns[df1.dtypes!="object"]
	for i in num_col:
		q1=df1[i].quantile(0.25)
		q3=df1[i].quantile(0.75)
		iqr=q3-q1
		med=df1[i].median()
		df1[i]=np.where((df1[i]<q1-1.5*iqr) | (df1[i]>q3+1.5*iqr),med,df1[i])
	return(df1)

outlier1=remove_out(data)
#outliers removed

data.isnull().sum()

#handling null
from sklearn.impute import SimpleImputer
imp = SimpleImputer(strategy="mean")
data["fare_amount"]=imp.fit_transform(data[["fare_amount"]])
data.isnull().sum()

#for feature selection
plt.figure(figsize=(10,6))
sns.heatmap(data.corr(),annot=True,cmap="viridis")
plt.show()

sns.pairplot(data,y_vars="passenger_count")

#splitting features and labels
X=data.drop(columns='passenger_count') #feature
y=data["passenger_count"] #label

#splitting train and test dataset
from sklearn.preprocessing import StandardScaler
X_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.2,random_state=42)
st_x= StandardScaler()
X_train= st_x.fit_transform(X_train)
X_test= st_x.transform(X_test)
model=LinearRegression()
model.fit(X_train,y_train)
prediction=model.predict(X_test)

#evaluation of model
from sklearn.metrics import r2_score,mean_squared_error,mean_absolute_error
print("r2_score:",r2_score(y_test,prediction))
print("mean_squared_error:",mean_squared_error(y_test,prediction))
print("mean_absolute_error",mean_absolute_error(y_test,prediction))
print("root_mean_square_eror: ",np.sqrt(mean_squared_error(y_test,prediction)))

#plotting actual and predicted datapoints
pred_data=pd.DataFrame({"y_test":y_test,"prediction":prediction})
sns.scatterplot([pred_data["y_test"],pred_data["y_test"]])
sns.scatterplot([pred_data["y_test"],pred_data["prediction"]])





